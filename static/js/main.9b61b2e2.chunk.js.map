{"version":3,"sources":["services/installservice.js","views/pages/Install.js","App.js","serviceWorker.js","store.js","index.js","services/authservice.js","services/fetchservice.js"],"names":["installService","installAdmin","async","fetchservice","post","process","Install","adminUser","setAdminUser","React","useState","installError","setInstallError","history","useHistory","useEffect","then","user","console","log","data","catch","err","adminpassword","onClick","push","style","color","loading","className","DefaultLayout","lazy","Login","Page404","Page500","App","authService","getUser","Suspense","fallback","path","exact","name","render","props","Boolean","window","location","hostname","match","initialState","sidebarShow","store","createStore","state","type","rest","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","userSubject","BehaviorSubject","JSON","parse","localStorage","getItem","authenticate","userid","password","userData","setItem","stringify","next","value","logout","removeItem","axios","require","getAuthHeader","url","startsWith","loginData","loggedIn","token","authHeader","Authorization","get","headers","params"],"mappings":"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","file":"static/js/main.9b61b2e2.chunk.js","sourcesContent":["import fetchservice from \"./fetchservice\";\nconst base_url=process.env.REACT_APP_API_URL;\nexport const installService= {\n    installAdmin,\n}\n\nasync function installAdmin(){\n    return await fetchservice.post(`${base_url}/api/services/install/createadmin`,{});\n}\n","import React from \"react\"\nimport { CCol, CContainer, CRow,CButton } from \"@coreui/react\"\nimport { installService } from \"src/services/installservice\";\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min'\nconst Install=()=>{\n    const [adminUser,setAdminUser]= React.useState(null);\n    const [installError,setInstallError]= React.useState(\"\")\n    const history=useHistory();\n    React.useEffect(()=> {\n        setInstallError(\"\")\n        installService.installAdmin()\n        .then((user)=> {\n            console.log(user.data);\n            setAdminUser(user.data)\n        })\n        .catch((err)=> {\n            setInstallError(\"Installation failed. Refresh again. or clean MongoCollection (User)\")\n        })\n    },[])\n    const loginPage=()=>{\n          history.push(\"/login\");\n    }\n    return (\n        <div>\n            <CContainer>\n                <CRow>\n                    <CCol>\n                        <h2>creating Admin User...Please wait...</h2>\n                        {adminUser && (\n                             <div>\n                             <h3>Note down below admin login password: </h3>\n                             <p>Login: admin</p>\n                             <p>Password: {adminUser.adminpassword}</p>\n                             <br/>\n                             <CButton onClick={()=>loginPage()}>Login here</CButton>\n                             </div>\n                        )}\n                        {installError && (\n                            <div>\n                                <p style={{color:\"red\"}}>{installError}</p>\n                            </div>\n                        )}\n                    </CCol>\n                </CRow>\n            </CContainer>\n\n        </div>\n    )\n}\n\nexport default Install","import React, { Component } from 'react'\nimport { HashRouter, Route, Switch,Redirect } from 'react-router-dom'\nimport { authService } from './services/authservice'\nimport './scss/style.scss'\nimport Install from './views/pages/Install'\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'))\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\nconst Register = React.lazy(() => import('./views/pages/register/Register'))\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'))\n\nfunction App(){\n    console.log(\"value of authService.getUser\"+authService.getUser);\n    return (\n      <HashRouter>\n        <React.Suspense fallback={loading}>\n          <Switch>\n            <Route path=\"/login\" exact name=\"Login Page\" render={(props) => <Login {...props} />} />  \n            <Route path=\"/install\" exact name=\"Install Page\" render={(props) => <Install {...props} />} />  \n            <Route exact path=\"/404\" name=\"Page 404\" render={(props) => <Page404 {...props} />} />\n            <Route exact path=\"/500\" name=\"Page 500\" render={(props) => <Page500 {...props} />} />\n            {!authService.getUser && (\n            <Route path=\"/\" name=\"Login Page\" render={(props) => <Login {...props} />} />  \n            )}\n            {authService.getUser && (\n              <Route path=\"/\" name=\"Home Page\" render={(props) => <DefaultLayout {...props} />} />\n            )}\n            \n          </Switch>\n        </React.Suspense>\n      </HashRouter>\n    )\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import { createStore } from 'redux'\n\nconst initialState = {\n  sidebarShow: true,\n}\n\nconst changeState = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return { ...state, ...rest }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(changeState)\nexport default store\n","import 'react-app-polyfill/stable'\nimport 'core-js'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import fetchservice from \"./fetchservice\"\nimport { BehaviorSubject } from \"rxjs\";\nconst base_url=process.env.REACT_APP_API_URL;\n\nconst userSubject = new BehaviorSubject(\n    JSON.parse(localStorage.getItem(\"user\"))\n);\nexport const authService =  {\n    authenticate,\n    logout,\n    get getUser(){\n        return userSubject.value;\n    }\n}\n\nasync function authenticate(userid,password){\n    let userData= await fetchservice.post(`${base_url}/api/services/login/`,{userid,password});\n    if(userData)\n    {\n        console.log(\"setting local storage\")\n        localStorage.setItem(\"user\",JSON.stringify(userData.data));\n        userSubject.next(userData.data);\n        console.log(userSubject.value);\n    } \n    else{\n        console.log(\"null userData\");\n    }\n    return userData;\n}\n\nasync function logout(){\n    localStorage.removeItem(\"user\");\n    userSubject.next(null);\n}","import { authService } from \"./authservice\";\nconst axios = require(\"axios\")\nexport default {\n   get,\n   post\n}\n\nasync function get(url){\n   return await axios.get(url,{\n      headers:getAuthHeader(url)\n   })\n}\n\nasync function post(url,params){\n    return await axios.post(url,params,{\n       headers:getAuthHeader(url)\n    });\n}\n\nfunction getAuthHeader(url)\n{\n   let backendApi=url.startsWith(process.env.REACT_APP_API_URL)\n   let loginData=authService.getUser\n   console.log(loginData)\n   let loggedIn=false;\n   if(loginData && loginData.token)\n   {\n      loggedIn=true;\n   }\n   if(loggedIn)\n   {\n      let authHeader= {Authorization:`Bearer ${loginData.token}`}\n      console.log(\"auth header is \")\n      console.log(authHeader)\n      return authHeader\n   }\n   else\n   {\n      console.log(\"no auth header\")\n      return {}\n   }\n}"],"sourceRoot":""}